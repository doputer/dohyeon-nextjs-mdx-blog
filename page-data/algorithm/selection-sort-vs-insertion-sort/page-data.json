{"componentChunkName":"component---src-templates-blog-post-js","path":"/algorithm/selection-sort-vs-insertion-sort/","result":{"data":{"site":{"siteMetadata":{"title":"DOPUTER","author":"김도현","siteUrl":"https://dohyeon.dev","comment":{"disqusShortName":"","utterances":"doputer/doputer.github.io"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"c76e74b2-0450-5534-8642-2eaf325eca8e","excerpt":"비교 방법 1. 각각 1000, 10000, 100000 크기의 배열 A, B에 0 ~ 999 사이의 난수를 채운다. (단, 동일한 난수로 채운다.) 2. 정렬 안된 상태, 정렬된 상태, 역순 정렬된 상태에서 선택 정렬과 삽입 정렬을 하여 시간을 비교한다. 사용 코드 결과 Unsort 정렬 안된 상태에서는 삽입 정렬이 선택 정렬보다 두 배 가까이 빠르다. Sort 정렬된 상태에서는 삽입 정렬이 선택 정렬보다 압도적으로 빠르다. Reverse sort…","html":"<h2 id=\"비교-방법\" style=\"position:relative;\"><a href=\"#%EB%B9%84%EA%B5%90-%EB%B0%A9%EB%B2%95\" aria-label=\"비교 방법 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>비교 방법</h2>\n<p>1. 각각 1000, 10000, 100000 크기의 배열 A, B에 0 ~ 999 사이의 난수를 채운다. (단, 동일한 난수로 채운다.)</p>\n<p>2. 정렬 안된 상태, 정렬된 상태, 역순 정렬된 상태에서 선택 정렬과 삽입 정렬을 하여 시간을 비교한다.</p>\n<h2 id=\"사용-코드\" style=\"position:relative;\"><a href=\"#%EC%82%AC%EC%9A%A9-%EC%BD%94%EB%93%9C\" aria-label=\"사용 코드 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>사용 코드</h2>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;time.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;Windows.h></span></span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>b<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>a<span class=\"token punctuation\">;</span>\n\t<span class=\"token operator\">*</span>a <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>b<span class=\"token punctuation\">;</span>\n\t<span class=\"token operator\">*</span>b <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">bubble</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>L<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> i<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> L<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>L<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>L<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">selection</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>L<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>value <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\tvalue <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>L<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>value <span class=\"token operator\">></span> L<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t\t\tvalue <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>L<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> <span class=\"token operator\">*</span>value<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>L<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">insertion</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>L<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">int</span> j<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\tj <span class=\"token operator\">=</span> i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\tvalue <span class=\"token operator\">=</span> L<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> L<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> value<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{</span>\n\t\t\tL<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> L<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\tj<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tL<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">input</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>A<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>B<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">int</span> var<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\tvar <span class=\"token operator\">=</span> <span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span>\n\t\tA<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> var<span class=\"token punctuation\">;</span>\n\t\tB<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> var<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>A <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>B <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> opt<span class=\"token punctuation\">;</span>\n\n\tLARGE_INTEGER ticksPerSec<span class=\"token punctuation\">;</span>\n\tLARGE_INTEGER start<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">,</span> diff<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">srand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span><span class=\"token punctuation\">)</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Input option(1: unsort, 2: sort, 3: reverse, 4: exit): \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>opt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>opt <span class=\"token operator\">==</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Input data size: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\tA <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tB <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token function\">input</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> B<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>opt <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">selection</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">selection</span><span class=\"token punctuation\">(</span>B<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>opt <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">bubble</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">bubble</span><span class=\"token punctuation\">(</span>B<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token function\">QueryPerformanceFrequency</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>ticksPerSec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">QueryPerformanceCounter</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">selection</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">QueryPerformanceCounter</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\tdiff<span class=\"token punctuation\">.</span>QuadPart <span class=\"token operator\">=</span> end<span class=\"token punctuation\">.</span>QuadPart <span class=\"token operator\">-</span> start<span class=\"token punctuation\">.</span>QuadPart<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Selection sort: %.8fsec\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span>diff<span class=\"token punctuation\">.</span>QuadPart <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span>ticksPerSec<span class=\"token punctuation\">.</span>QuadPart<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token function\">QueryPerformanceFrequency</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>ticksPerSec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">QueryPerformanceCounter</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">insertion</span><span class=\"token punctuation\">(</span>B<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">QueryPerformanceCounter</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\tdiff<span class=\"token punctuation\">.</span>QuadPart <span class=\"token operator\">=</span> end<span class=\"token punctuation\">.</span>QuadPart <span class=\"token operator\">-</span> start<span class=\"token punctuation\">.</span>QuadPart<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Insertion sort: %.8fsec\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span>diff<span class=\"token punctuation\">.</span>QuadPart <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span>ticksPerSec<span class=\"token punctuation\">.</span>QuadPart<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>B<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tA <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t\tB <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"결과\" style=\"position:relative;\"><a href=\"#%EA%B2%B0%EA%B3%BC\" aria-label=\"결과 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결과</h2>\n<ol>\n<li>Unsort</li>\n</ol>\n\n      <div class=\"remark-sticky-table\"> \n      <div class=\"remark-sticky-table-wrapper\" style=\"width: 100%; height: 100%; overflow: auto;\">\n          <table class=\"remark-sticky-table-table\">\n      \n            \n               <thead class=\"remark-sticky-table-thead\">\n                     <tr class=\"remark-sticky-table-tr\">\n                     <th class=\"remark-sticky-table-th\" style=\"position: sticky; display: table-cell; width: auto; min-width: auto; white-space: nowrap; top: 0px; z-index: 2;\"> </th><th class=\"remark-sticky-table-th\" style=\"position: sticky; display: table-cell; width: auto; min-width: auto; white-space: nowrap; top: 0px; z-index: 2;\">1000</th><th class=\"remark-sticky-table-th\" style=\"position: sticky; display: table-cell; width: auto; min-width: auto; white-space: nowrap; top: 0px; z-index: 2;\">10000</th><th class=\"remark-sticky-table-th\" style=\"position: sticky; display: table-cell; width: auto; min-width: auto; white-space: nowrap; top: 0px; z-index: 2;\">100000</th>\n                        </tr> \n                        </thead><tbody class=\"remark-sticky-table-tbody\">\n                     <tr class=\"remark-sticky-table-tr\">\n                          <td class=\"remark-sticky-table-td\">Selection sort</td><td class=\"remark-sticky-table-td\">0.00131280sec</td><td class=\"remark-sticky-table-td\">0.09303190sec</td><td class=\"remark-sticky-table-td\">9.10471170sec</td>\n                         </tr>\n                         </tbody><tbody class=\"remark-sticky-table-tbody\">\n                     <tr class=\"remark-sticky-table-tr\">\n                          <td class=\"remark-sticky-table-td\">Insertion sort</td><td class=\"remark-sticky-table-td\">0.00068790sec</td><td class=\"remark-sticky-table-td\">0.04695960sec</td><td class=\"remark-sticky-table-td\">4.57803530sec</td>\n                         </tr>\n                         </tbody>\n               \n        \n          </table>\n      </div>\n    </div>\n  \n<p>정렬 안된 상태에서는 삽입 정렬이 선택 정렬보다 두 배 가까이 빠르다.</p>\n<ol start=\"2\">\n<li>Sort</li>\n</ol>\n\n      <div class=\"remark-sticky-table\"> \n      <div class=\"remark-sticky-table-wrapper\" style=\"width: 100%; height: 100%; overflow: auto;\">\n          <table class=\"remark-sticky-table-table\">\n      \n            \n               <thead class=\"remark-sticky-table-thead\">\n                     <tr class=\"remark-sticky-table-tr\">\n                     <th class=\"remark-sticky-table-th\" style=\"position: sticky; display: table-cell; width: auto; min-width: auto; white-space: nowrap; top: 0px; z-index: 2;\"> </th><th class=\"remark-sticky-table-th\" style=\"position: sticky; display: table-cell; width: auto; min-width: auto; white-space: nowrap; top: 0px; z-index: 2;\">1000</th><th class=\"remark-sticky-table-th\" style=\"position: sticky; display: table-cell; width: auto; min-width: auto; white-space: nowrap; top: 0px; z-index: 2;\">10000</th><th class=\"remark-sticky-table-th\" style=\"position: sticky; display: table-cell; width: auto; min-width: auto; white-space: nowrap; top: 0px; z-index: 2;\">100000</th>\n                        </tr> \n                        </thead><tbody class=\"remark-sticky-table-tbody\">\n                     <tr class=\"remark-sticky-table-tr\">\n                          <td class=\"remark-sticky-table-td\">Selection sort</td><td class=\"remark-sticky-table-td\">0.00091760sec</td><td class=\"remark-sticky-table-td\">0.09243670sec</td><td class=\"remark-sticky-table-td\">9.11272040sec</td>\n                         </tr>\n                         </tbody><tbody class=\"remark-sticky-table-tbody\">\n                     <tr class=\"remark-sticky-table-tr\">\n                          <td class=\"remark-sticky-table-td\">Insertion sort</td><td class=\"remark-sticky-table-td\">0.00000290sec</td><td class=\"remark-sticky-table-td\">0.00002820sec</td><td class=\"remark-sticky-table-td\">0.00027650sec</td>\n                         </tr>\n                         </tbody>\n               \n        \n          </table>\n      </div>\n    </div>\n  \n<p>정렬된 상태에서는 삽입 정렬이 선택 정렬보다 압도적으로 빠르다.</p>\n<ol start=\"3\">\n<li>Reverse sort</li>\n</ol>\n\n      <div class=\"remark-sticky-table\"> \n      <div class=\"remark-sticky-table-wrapper\" style=\"width: 100%; height: 100%; overflow: auto;\">\n          <table class=\"remark-sticky-table-table\">\n      \n            \n               <thead class=\"remark-sticky-table-thead\">\n                     <tr class=\"remark-sticky-table-tr\">\n                     <th class=\"remark-sticky-table-th\" style=\"position: sticky; display: table-cell; width: auto; min-width: auto; white-space: nowrap; top: 0px; z-index: 2;\"> </th><th class=\"remark-sticky-table-th\" style=\"position: sticky; display: table-cell; width: auto; min-width: auto; white-space: nowrap; top: 0px; z-index: 2;\">1000</th><th class=\"remark-sticky-table-th\" style=\"position: sticky; display: table-cell; width: auto; min-width: auto; white-space: nowrap; top: 0px; z-index: 2;\">10000</th><th class=\"remark-sticky-table-th\" style=\"position: sticky; display: table-cell; width: auto; min-width: auto; white-space: nowrap; top: 0px; z-index: 2;\">100000</th>\n                        </tr> \n                        </thead><tbody class=\"remark-sticky-table-tbody\">\n                     <tr class=\"remark-sticky-table-tr\">\n                          <td class=\"remark-sticky-table-td\">Selection sort</td><td class=\"remark-sticky-table-td\">0.00095050sec</td><td class=\"remark-sticky-table-td\">0.09835080sec</td><td class=\"remark-sticky-table-td\">8.93048030sec</td>\n                         </tr>\n                         </tbody><tbody class=\"remark-sticky-table-tbody\">\n                     <tr class=\"remark-sticky-table-tr\">\n                          <td class=\"remark-sticky-table-td\">Insertion sort</td><td class=\"remark-sticky-table-td\">0.00097610sec</td><td class=\"remark-sticky-table-td\">0.09260770sec</td><td class=\"remark-sticky-table-td\">9.19390620sec</td>\n                         </tr>\n                         </tbody>\n               \n        \n          </table>\n      </div>\n    </div>\n  \n<p>역순 정렬된 상태에서는 삽입 정렬과 선택 정렬이 비슷한 속도를 보인다.</p>","tableOfContents":"<ul>\n<li><a href=\"/algorithm/selection-sort-vs-insertion-sort/#%EB%B9%84%EA%B5%90-%EB%B0%A9%EB%B2%95\">비교 방법</a></li>\n<li><a href=\"/algorithm/selection-sort-vs-insertion-sort/#%EC%82%AC%EC%9A%A9-%EC%BD%94%EB%93%9C\">사용 코드</a></li>\n<li><a href=\"/algorithm/selection-sort-vs-insertion-sort/#%EA%B2%B0%EA%B3%BC\">결과</a></li>\n</ul>","frontmatter":{"title":"선택 정렬 vs 삽입 정렬 비교 ⏱"}}},"pageContext":{"slug":"/algorithm/selection-sort-vs-insertion-sort/","previous":{"fields":{"slug":"/retrospect/apply-for-42-seoul/"},"frontmatter":{"title":"42 서울(42 Seoul)에 지원하며 📝"}},"next":{"fields":{"slug":"/project/snake-game/"},"frontmatter":{"title":"Snake 게임 🐍"}}}}}
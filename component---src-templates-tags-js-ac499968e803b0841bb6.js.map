{"version":3,"sources":["webpack:///./src/components/tag-content/index.jsx","webpack:///./src/templates/tags.js"],"names":["TagContent","edges","tagHeader","tag","totalCount","className","to","map","node","slug","fields","title","frontmatter","key","pageQuery","Tags","location","pageContext","data","siteMetadata","site","allMarkdownRemark"],"mappings":"uNAKaA,G,UAAa,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,MACrBC,EAAS,UADyC,EAAtBC,IACnB,KADyC,EAAjBC,WACxB,IAEf,OACE,yBAAKC,UAAU,yBACb,kBAAC,OAAD,CAAMC,GAAE,SACN,4BAAKJ,IAEP,4BACGD,EAAMM,KAAI,YAAe,IAAZC,EAAW,EAAXA,KACJC,EAASD,EAAKE,OAAdD,KACAE,EAAUH,EAAKI,YAAfD,MAER,OACE,wBAAIE,IAAKJ,EAAMJ,UAAU,eACvB,kBAAC,OAAD,CAAMC,GAAIG,GAAOE,WCuBlBG,GAFEC,UAnCF,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,SAAUC,EAAwB,EAAxBA,YAAaC,EAAW,EAAXA,KAC7BC,EAAiBD,EAAKE,KAAtBD,aACAhB,EAAQc,EAARd,IAFwC,EAGlBe,EAAKG,kBAA3BpB,EAHwC,EAGxCA,MAAOG,EAHiC,EAGjCA,WAEf,OACE,kBAAC,IAAD,CAAQY,SAAUA,EAAUL,MAAOQ,EAAaR,OAC9C,kBAAC,EAAD,CAAYV,MAAOA,EAAOE,IAAKA,EAAKC,WAAYA,MA8BhC","file":"component---src-templates-tags-js-ac499968e803b0841bb6.js","sourcesContent":["import { Link } from 'gatsby'\nimport React from 'react'\n\nimport './index.scss'\n\nexport const TagContent = ({ edges, tag, totalCount }) => {\n  const tagHeader = `Tags / ${tag} (${totalCount})`\n\n  return (\n    <div className=\"tag-content-container\">\n      <Link to={`/tags`}>\n        <h1>{tagHeader}</h1>\n      </Link>\n      <ul>\n        {edges.map(({ node }) => {\n          const { slug } = node.fields\n          const { title } = node.frontmatter\n\n          return (\n            <li key={slug} className=\"tag-content\">\n              <Link to={slug}>{title}</Link>\n            </li>\n          )\n        })}\n      </ul>\n    </div>\n  )\n}\n","import { graphql } from 'gatsby'\nimport PropTypes from 'prop-types'\nimport React from 'react'\nimport { Layout } from '../layout'\nimport { TagContent } from '../components/tag-content'\n\nconst Tags = ({ location, pageContext, data }) => {\n  const { siteMetadata } = data.site\n  const { tag } = pageContext\n  const { edges, totalCount } = data.allMarkdownRemark\n\n  return (\n    <Layout location={location} title={siteMetadata.title}>\n      <TagContent edges={edges} tag={tag} totalCount={totalCount} />\n    </Layout>\n  )\n}\n\nTags.propTypes = {\n  pageContext: PropTypes.shape({\n    tag: PropTypes.string.isRequired,\n  }),\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      totalCount: PropTypes.number.isRequired,\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n              title: PropTypes.string.isRequired,\n            }),\n            fields: PropTypes.shape({\n              slug: PropTypes.string.isRequired,\n            }),\n          }),\n        }).isRequired\n      ),\n    }),\n  }),\n}\n\nexport default Tags\n\nexport const pageQuery = graphql`\n  query($tag: String) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}